// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference"]
}

datasource db {
  provider = "postgresql"
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]

  watchlists           Watchlist[]
  watchersOnWatchlists WatchersOnWatchlists[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Watchlist {
  id String @id @default(uuid())

  name String

  owner      User                     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  watchers   WatchersOnWatchlists[]
  watchables WatchablesOnWatchlists[]

  openInvites WatchlistInvite[]

  createdAt DateTime? @default(now()) @ignore
  updatedAt DateTime? @default(now()) @updatedAt @ignore
}

model WatchersOnWatchlists {
  watcher   User   @relation(fields: [watcherId], references: [id], onDelete: Cascade)
  watcherId String

  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  watchlistId String

  joinedAt DateTime @default(now()) @ignore

  createdAt DateTime @default(now()) @ignore
  updatedAt DateTime @default(now()) @updatedAt @ignore

  @@id([watcherId, watchlistId])
}

enum ExternalWatchableSource {
  TMDB
}

enum WatchableType {
  MOVIE
  TV_SHOW
}

model Watchable {
  id String @id @default(uuid())

  name       String
  rating     Decimal? @db.Decimal(10, 2)
  externalId String

  image      String?
  runtime    Int?
  type       WatchableType
  source     ExternalWatchableSource
  watchLists WatchablesOnWatchlists[]

  createdAt DateTime @default(now()) @ignore
  updatedAt DateTime @default(now()) @updatedAt @ignore

  @@unique([source, externalId, type])
  @@index([type])
}

model WatchablesOnWatchlists {
  watchable   Watchable @relation(fields: [watchableId], references: [id], onDelete: Restrict)
  watchableId String

  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  watchlistId String

  seenOn DateTime?

  createdAt DateTime @default(now()) @ignore
  updatedAt DateTime @default(now()) @updatedAt @ignore

  @@id([watchableId, watchlistId])
}

model WatchlistInvite {
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  watchlistId String

  inviteCode String    @unique
  validUntil DateTime?
  maxUses    Int?
  uses       Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt @ignore
}
